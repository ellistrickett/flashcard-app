[
    {"front": "What are the key elements of computer hardware?", "back": "Motherboard, Processing elements, Primary storage, Secondary storage, Peripherals."},
    {"front": "What is the function of the motherboard?", "back": "It holds and connects many crucial electronic components such as the processor, memory, and peripheral devices."},
    {"front": "What is the role of RAM in a computer system?", "back": "RAM temporarily holds data and programs the computer is executing; it is erased when the computer is off."},
    {"front": "Name three types of secondary storage devices.", "back": "Magnetic storage devices (hard drives), Optical storage (CD, Blu-ray), Flash memory devices (SSD, USB)."},
    {"front": "What are input and output devices?", "back": "Input devices (mouse, keyboard) allow data entry, while output devices (monitor, printer) present processed data."},
    {"front": "What is a System on a Chip (SoC)?", "back": "An SoC integrates all components of a computer or electronic system into a single chip."},
    {"front": "Define a microprocessor.", "back": "A microprocessor is a computer processor that incorporates a CPU on a single integrated circuit (IC)."},
    {"front": "How does a processor differ from a microprocessor?", "back": "A processor can be built from multiple circuits; a microprocessor integrates CPU functions into one chip."},
    {"front": "What is an integrated circuit (IC)?", "back": "An IC is a set of electronic circuits on a small piece of semiconductor material, typically silicon."},
    {"front": "List the main components of a microprocessor.", "back": "CPU, Memory, System bus, Input/Output (I/O)."},
    {"front": "What components make up the CPU?", "back": "Arithmetic Logic Unit (ALU), Registers, Control Unit."},
    {"front": "What is the role of the ALU?", "back": "The ALU performs arithmetic and logical operations on data."},
    {"front": "Describe the instruction cycle.", "back": "Fetch: Retrieve instruction; Decode: Interpret it; Execute: Perform the action. This cycle repeats continuously."},
    {"front": "What is pipelining in a processor?", "back": "Pipelining splits instruction execution into stages, allowing multiple instructions to be processed concurrently."},
    {"front": "Differentiate between primary and secondary memory.", "back": "Primary memory (RAM/ROM) is fast and temporary; secondary memory (HDD/SSD) is permanent and slower."},
    {"front": "What does the system bus do?", "back": "It connects the CPU, memory, and I/O devices, enabling data transfer via data, address, and control buses."},
    {"front": "What is assembly language?", "back": "A low-level programming language closely related to machine code, specific to computer architectures."},
    {"front": "Give an example of an assembly language instruction.", "back": "LDA #$80 loads the value $80 into the accumulator."},
    {"front": "What is the MOS 6502 microprocessor?", "back": "A widely used processor in early computers like the Apple II and Commodore 64, known for its simplicity."},
    {"front": "What is zero-page addressing in the 6502 processor?", "back": "Accesses the first 256 bytes of memory for faster addressing with a single byte."},
    {"front": "List three addressing modes of the 6502 processor.", "back": "Immediate, Absolute, Zero Page."},
    {"front": "What is the role of registers in a CPU?", "back": "Registers temporarily hold data and instructions during program execution."},
    {"front": "What is the difference between compiled and interpreted languages?", "back": "Compiled languages translate the entire program before execution, while interpreted languages execute line by line."},
    {"front": "Give examples of compiled and interpreted languages.", "back": "Compiled: C++, Java. Interpreted: Python, JavaScript."},
    {"front": "What is symbolic machine code?", "back": "Another term for assembly language, where instructions are human-readable representations of machine code."},
    {"front": "How wide is the address bus of the 6502 processor?", "back": "16 bits, allowing access to 64 KB of memory."},
    {"front": "What is the function of the control unit in a CPU?", "back": "It manages instruction fetching, decoding, and directing the ALU to execute tasks."},
    {"front": "Define opcode.", "back": "An opcode is the part of a machine language instruction that specifies the operation to be performed."},
    {"front": "What is an example of load and store operations in 6502?", "back": "LDA loads the accumulator; STA stores the accumulator value to memory."},
    {"front": "Name two arithmetic instructions for the 6502 processor.", "back": "ADC (Add with Carry), SBC (Subtract with Carry)."},
    {"front": "Explain the concept of pipelining.", "back": "Pipelining allows multiple instruction stages to be processed simultaneously, improving CPU efficiency."},
    {"front": "What are addressing modes in assembly language?", "back": "Techniques used to specify the operand of an instruction (Immediate, Direct, Indirect, etc.)."},
    {"front": "Describe immediate addressing mode.", "back": "The operand is specified directly in the instruction."},
    {"front": "Describe absolute addressing mode.", "back": "The instruction contains the full memory address of the operand."},
    {"front": "What is the significance of the MOS 6502 in computing history?", "back": "It was widely used in early personal computers due to its simplicity and low cost."},
    {"front": "What is machine code?", "back": "The binary code that a CPU can execute directly."},
    {"front": "How does the ALU interact with registers?", "back": "The ALU performs operations on data stored in registers."},
    {"front": "What is the role of the system bus in microprocessors?", "back": "It transfers data, addresses, and control signals among CPU, memory, and I/O devices."},
    {"front": "Explain the fetch-decode-execute cycle.", "back": "Fetches an instruction, decodes it, and executes it. This cycle repeats continuously by the CPU. It is the basic operational process of a computer"},
    {"front": "What is a high level program/ing language?", "back": "It is easy to read, write and maintain. Uses natural language elements and must be translated into machine language by a compilier or interpreter. Example: C++/Java/Python/etc. "},
    {"front": "What is a low level program/ing language?", "back": "A low-level programming language is closely tied to a computer's hardware, providing minimal abstraction. It includes machine code and assembly language, allowing direct memory and processor control for high performance but is harder to read, write, and maintain compared to high-level languages."},
    {"front": "What is a compilier/compiled programming language?", "back": "A compiler translates the whole program into machine code before the program is run. As a result, compiled programs tend to be faster and more efficient to execute than interpreted programs. It can be difficult to test individual lines of compiled code compared to interpreted programs."},
    {"front": "What is a Interpreter/Interpretered programming language?", "back": "Interpreters run through a program line by line and execute each command. Here, if the author decides he wants to use a different kind of olive oil, he could scratch the old one out and add the new one."},
    {"front": "What does RAM stand for?", "back": "Random Access Memory."},
    {"front": "What does SSD stand for?", "back": "Solid State Drive."},
    {"front": "What does SoC stand for?", "back": "System on a Chip."},
    {"front": "What does CPU stand for?", "back": "Central Processing Unit."},
    {"front": "What does IC stand for?", "back": "Integrated Circuit."},
    {"front": "What does I/O stand for?", "back": "Input/Output."},
    {"front": "What does ALU stand for?", "back": "Arithmetic Logic Unit."},
    {"front": "What does ROM stand for?", "back": "Read-Only Memory."},
    {"front": "What does HDD stand for?", "back": "Hard Disk Drive."}
]
  